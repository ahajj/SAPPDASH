Author: Andrew Hajj
Class: METCS622 Term Project - SAPPDASH

========================================================

This project simulates monitoring a list of systems hosted on the SAP Cloud Platform.

All systems are pseudo-randomly generated, along with their metrics and processes (where applicable).

The requirements are the postconditions of AppMonitorMain.main().  It is recommended to expand the console window in eclipse to show all three systems...it should autoscroll to the next system 'refresh'. 

The design is AppMonitorMain   --->  System 
				       ^
                        	    /  |  \
                    		   /   |   \
                    		  /    |    \
                    		 /     |     \
                    		/      |      \
           	      JavaSystem  HTML5System  DatabaseSystem  (subclasses of System)

A more detailed design and use case can be seen here:
https://docs.google.com/spreadsheets/d/1JoeDf3j_TSLRCk0RRYlQg7WB0l5a8Q8P0SMfZs_QONE/edit?usp=sharing
           	      
---  NOTE: You will need to import an SQLite jdbc driver for this project to work ---
---  NOTE 2: You will need to change the url string in AMDBSupport.getConnection() to a path that leads to your SQLite Database ---     	      
   
All Systems have a list of Metrics which have contain warning and error thresholds.
Metrics also contain the current value, as well as the min and max values.

Java Systems have a list of Processes which also have metrics.

The abstract class AMSupport contains a number of supporting fields and functions.  These include:
	Static final variables (possible system states, warning and error thresholds, metric names...etc.  basically the onestop shop for numbers/text that are used across the application so that if they need to be changed it will only have to be once) 

Upon running AppMonitorMain (under com.appmonitor), the application will first prompt the user to select Continuous or Sandbox Mode.

Continuous mode will attempt to recover the systems from a previous run.  If it is unable to do so, it will generate a number of systems, along with pseudo-randomly generated metric values.

Sandbox mode will prompt the user for a number of each system to generate, as well as the number of refreshes to run.  For example, an input of '2 3 4 30' will:
	1. Generate 2 Java Systems, 3 HTML5 Systems and 4 Database Systems
	2. Simulate 30 system refreshes 

**Note: Currently the application is set to generate 3 systems (1 Java Systems, 1 Database Systems and 1 HTML5 Systems) in Continuous Mode.  This can be changed in AppMonitorMain by changing 'numberOfSystems'

After generating the systems/metrics, the application attempts to analyze the systems.
	It looks at the metric value and checks to see if it is above the error and/or warning thresholds.
	Above Warning Threshold generates a message stating the application is unhealthy
	Above Error Threshold generates a message stating the application should be restarted.
^ The above information is shown in a nice output to console, as well as a detailed log file (ApplicationMonitorLog.log in the project directory)

SAPPDASH will also analyze each system to determine it's current state as well as a historical analysis.

SAPPDASH will then print it's analysis to the console.  After printing the analysis the console, SAPPDASH will create a snapshot of the systems and metrics that can be used in the next run to continue monitoring the same systems

SAPPDASH keeps a record the last 500 metric values & states per metric.  These values are then used to calculate the average metric value.

Unit testing can be found under 'test'.  The test package structure mirrors src.

**Note** Running AMSupportNoJUnit can be done to test File I/O as well as acts as a nice demo of the system.
**Note** This test runs against SystemBackup.dat instead of a database

The SQLite JDBC driver is required to run SAPPDASH.  Please be sure it is downloaded and imported into the project prior to running.

-----  Sample Output -----

The following is a sample output from the system:  

Welcome to SAPPDASH! 
Currently two modes are supported...
Continuous will generate/recover systems and will run until the application is closed
Sandbox will allow you to input systems and time to monitor.Please select the sytem mode - [C]ontinuous or [S]andbox: s
You have selected--->s
Beginning Sandbox Mode:
 Please enter the number of each system you would like to generate followed by the number of refreshes you would like to run.
 For example, creating 3 Java systems, 2 HTML5 systems and 1 Database system to be updated 45 times would look like '3 2 1 45' : 1 1 1 3

You have selected--->1 1 1 3
Generated System: javaaccount0applicationName0!
Generated System: html5account1applicationName1!
Generated System: databaseaccount2applicationName2!

...
 _____________________________________
/ javaaccount0applicationName0        \ 
|_____________________________________|______________________________________________________________________
|  Type:                               java |                                                      |        |
| Account:                         account0 |                  Metric:      Value            State | Average|
| State:                            Warning |                                                      |        |
| # of Metrics:                           8 |         Used Disc Space:  24 %          -         Ok |  50.50 |
|    # Error:                             0 |     Requests per Minute:  28 requests   -         Ok |  41.50 |
|    # Warning:                           0 |                CPU Load:  61 %          -         Ok |  56.38 |
|    # Ok:                                8 |                Disk I/O:  80 %          -         Ok |  48.63 |
| # of Processes:                         2 |         OS Memory Usage:  27 %          -         Ok |  55.00 |
|    # Error:                             0 |       Heap Memory Usage:  41 %          -         Ok |  39.25 |
|    # Warning:                           1 |   Average Response Time:  90 ms         -         Ok |  49.88 |
|    # Ok:                                1 |            Busy Threads:  57            -         Ok |  47.25 |
\___________________________________________/\_____________________________________________________/\_______/
Current Analysis: System Health and/or Recommended Action: Unhealthy
Historical Analysis Breakdown:
	Healthy 0.00%  | Unhealthy 87.50%  | Restart Recommended 12.50% 
System refreshed 2 times.
 _____________________________________
/ databaseaccount2applicationName2    \ 
|_____________________________________|______________________________________________________________________
|  Type:                           database |                                                      |        |
| Account:                         account2 |                  Metric:      Value            State | Average|
| State:                                 Ok |                                                      |        |
| # of Metrics:                           2 |                CPU Load:  14 %          -         Ok |  50.00 |
|    # Error:                             0 |                Disk I/O:  70 %          -         Ok |  42.00 |
|    # Warning:                           0 |                                                      |        |
|    # Ok:                                2 |                                                      |        |
\___________________________________________/\_____________________________________________________/\_______/
Current Analysis: System Health and/or Recommended Action: Healthy
Historical Analysis Breakdown:
	Healthy 75.00%  | Unhealthy 0.00%  | Restart Recommended 25.00% 
System refreshed 2 times.
 _____________________________________
/ html5account1applicationName1       \ 
|_____________________________________|______________________________________________________________________
|  Type:                              html5 |                                                      |        |
| Account:                         account1 |                  Metric:      Value            State | Average|
| State:                              Error |                                                      |        |
| # of Metrics:                           2 |          HTML5 Metric 1:  26 %          -    Warning |  44.50 |
|    # Error:                             1 |          HTML5 Metric 2:  99 %          -      Error |  47.63 |
|    # Warning:                           1 |                                                      |        |
|    # Ok:                                0 |                                                      |        |
\___________________________________________/\_____________________________________________________/\_______/
Current Analysis: System Health and/or Recommended Action: Restart Recommended
Historical Analysis Breakdown:
	Healthy 12.50%  | Unhealthy 0.00%  | Restart Recommended 87.50% 
System refreshed 2 times.


Opening the more detailed log (ApplicationMonitorLog.log) will show something like the following.  It now includes a timestamp and the analysis for each system

INFO [2020 06 15 20:26:21]: Analyzing javaaccount0applicationName0's current state...
INFO [2020 06 15 20:26:21]: Finished Current State Analysis

INFO [2020 06 15 20:26:21]: Analyzing javaaccount0applicationName0's historical state...
INFO [2020 06 15 20:26:21]: Finished Historical Analysis

INFO [2020 06 15 20:26:21]: Analyzing databaseaccount2applicationName2's current state...
INFO [2020 06 15 20:26:21]: All metrics show that databaseaccount2applicationName2 is healthy.
INFO [2020 06 15 20:26:21]: Finished Current State Analysis

INFO [2020 06 15 20:26:21]: Analyzing databaseaccount2applicationName2's historical state...
INFO [2020 06 15 20:26:21]: Finished Historical Analysis

INFO [2020 06 15 20:26:21]: Analyzing html5account1applicationName1's current state...
INFO [2020 06 15 20:26:21]: The following Metrics have an Error! Metric Value is greatly above the Acceptable Range!
INFO [2020 06 15 20:26:21]:  * 'HTML5 Metric 2' at 99 % (W:20%|E:30%)
INFO [2020 06 15 20:26:21]: The following Metrics have a Warning! Metric Value is slightly above the Acceptable Range!
INFO [2020 06 15 20:26:21]:  * 'HTML5 Metric 1' at 26 % (W:20%|E:30%)
INFO [2020 06 15 20:26:21]: Finished Current State Analysis

INFO [2020 06 15 20:26:21]: Analyzing html5account1applicationName1's historical state...
INFO [2020 06 15 20:26:21]: Metrics that have had errors over 35.0% of the time:  
INFO [2020 06 15 20:26:21]:  * HTML5 Metric 1: Healthy 25.00%  | Unhealthy 25.00%  | Restart Recommended 50.00% 
INFO [2020 06 15 20:26:21]:  * HTML5 Metric 2: Healthy 25.00%  | Unhealthy 0.00%  | Restart Recommended 75.00% 
INFO [2020 06 15 20:26:21]: 

INFO [2020 06 15 20:26:21]: Finished Historical Analysis
